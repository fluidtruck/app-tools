description: >
  Install a Helm chart to the configured cluster.

parameters:
  chart:
    description: >
      The name of the chart being installed.
    type: string
  chart-version:
    default: ""
    description: >
      The version of the chart being installed.
    type: string

  release-name:
    default: ""
    description: >
      Then Helm release name. Defaults to the value of CIRCLE_PROJECT_REPONAME.
    type: string
  namespace:
    default: ""
    description: >
      The Kubernetes namespace to use. Defaults to the value of CIRCLE_PROJECT_REPONAME.
    type: string
  image-name:
    default: ""
    description: >
      The name of the image to use. Defaults to the value of CIRCLE_PROJECT_REPONAME.
    type: string
  repo-url:
    default: ""
    description: >
      The repository URL this chart is located at.
    type: string
  values:
    default: ""
    description: >
      A comma delimited list of values files to use. For example:

      ./chart/common.yaml,./charts/stage.yaml
    type: string
  use-gcr:
    default: false
    description: >
      Set to true to automatically create the image.* values.
    type: boolean
  pr:
    default: false
    description: >
      Set to true to enable PR release name and namespace configuration.
    type: boolean
  pr-prefix:
    default: ""
    description: >
      The prefix to use for PR related naming.
    type: string

  gcloud-service-key:
    default: GCLOUD_SERVICE_KEY
    description: >
      The environment variable name containing the service account JSON key.
    type: env_var_name
  google-container-cluster:
    default: GOOGLE_CONTAINER_CLUSTER
    description: >
      The environment varibale name containing the cluster name.
    type: env_var_name
  google-container-region:
    default: GOOGLE_CONTAINER_REGION
    description: >
      The environment variable name containing the container region.
    type: env_var_name
  google-container-registry:
    default: gcr.io
    description: >
      The container registry to use.
    type: string
  google-container-registry-project-id:
    default: GOOGLE_CONTAINER_REGISTRY_PROJECT_ID
    description: >
      The environment variable name containing the container registry project ID.
    type: env_var_name
  google-project-id:
    default: GOOGLE_PROJECT_ID
    description: >
      The environment variable name containing the project ID.
    type: env_var_name

steps:
  - authenticate-gke:
      google-container-cluster: << parameters.google-container-cluster >>
      google-container-region: << parameters.google-container-region >>
      google-project-id: << parameters.google-project-id >>
      gcloud-service-key: << parameters.gcloud-service-key >>

  - jq/install
  - install-helm-client

  - when:
      condition: << parameters.repo-url >>
      steps:
        - run:
            name: Add custom helm repo.
            command: |-
              IFS="/" read -ra REPO \<<< "<< parameters.chart >>"
              helm repo add "${REPO[0]}" "<< parameters.repo-url >>"

  - run:
      name: Install Helm Chart
      command: |-
        HELM_OUTPUT="helm upgrade"

        CHART="<< parameters.chart >>"
        CHART_VERSION="<< parameters.chart-version >>"
        RELEASE_NAME="<< parameters.release-name >>"
        NAMESPACE="<< parameters.namespace >>"
        IMAGE_NAME=<< parameters.image-name >>
        VALUES="<< parameters.values >>"
        IS_PR="<< parameters.pr >>"
        PR_PREFIX="<< parameters.pr-prefix >>"

        if [ -z "${NAMESPACE}" ]; then
          NAMESPACE="${CIRCLE_PROJECT_REPONAME}"
        fi

        if [[ "${IS_PR}" == "true" ]]; then
          NODE_POOL_NAME="pull-request-node-pool"
          INGRESS_CLASS="pull-request"

          # If in a PR, and release-name is not set, concat the repo name and branch to create a
          # unique release name for the namespace.
          if [ -z "${RELEASE_NAME}" ]; then
            RELEASE_NAME=$(echo "${CIRCLE_BRANCH}" | iconv -c -t ascii//TRANSLIT | sed -r 's/[~\^]+//g' | sed -r 's/[^a-zA-Z0-9]+/-/g' | sed -r 's/^-+\|-+$//g' | tr A-Z a-z | cut -c 1-63)

            if [ -n "${PR_PREFIX}" ]; then
              RELEASE_NAME=$(echo "${PR_PREFIX}-${RELEASE_NAME}" | cut -c 1-63)
            fi
          fi
        elif [ -z "${RELEASE_NAME}" ]; then
          NODE_POOL_NAME="default-node-pool"
          INGRESS_CLASS="nginx"
          RELEASE_NAME="${CIRCLE_PROJECT_REPONAME}"
        fi

        if [ -n "${CHART_VERSION}" ]; then
          set -- "$@" --version "${CHART_VERSION}"
        fi

        USE_GCR="<< parameters.use-gcr >>"
        if [ "${USE_GCR}" == "true" ]; then
          IMAGE_NAME="<< parameters.image-name >>"
          if [ -z "${IMAGE_NAME}" ]; then
            IMAGE_NAME="${CIRCLE_PROJECT_REPONAME}"
          fi

          IMAGE_REGISTRY="<< parameters.google-container-registry >>"
          IMAGE_REPO="${<< parameters.google-container-registry-project-id >>}/${IMAGE_NAME}"
          IMAGE_TAG="${CIRCLE_SHA1:0:7}"

          set -- "$@" --set image.registry="${IMAGE_REGISTRY}"
          set -- "$@" --set image.repository="${IMAGE_REPO}"
          set -- "$@" --set image.tag="${IMAGE_TAG}"
        fi

        if [ -n "${VALUES}" ]; then
          SPLIT_VALUES=($(echo ${VALUES} | tr "," "\n"))
          for i in "${SPLIT_VALUES[@]}"; do
            set -- "$@" -f "${i}"
          done
        fi

        set -- "$@" --set 'affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].key'="cloud.google.com/gke-nodepool"
        set -- "$@" --set 'affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].operator'=In
        set -- "$@" --set 'affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].values[0]'=${NODE_POOL_NAME}
        set -- "$@" --set ingress.clusterIssuer="letsencrypt-production"
        set -- "$@" --set ingress.hostname="${INGRESS_HOSTNAME}"
        set -- "$@" --set ingress.annotations.'kubernetes\.io\/ingress\.class'="${INGRESS_CLASS}"

        if [[ "${VALUES}" == *"prod.yaml"* ]]; then
          set -- "$@" --set ingress.tls="true"
          set -- "$@" --set ingress.hostname="${NAMESPACE}.fluidtruck.io"
        else
          set -- "$@" --set 'ingress.extraTls[0].hosts[0]'="*.${NAMESPACE}.fluidtruck.io"
          set -- "$@" --set 'ingress.extraTls[0].secretName'="${NAMESPACE}-tls"

          if [[ "${IS_PR}" == "true" ]]; then
            set -- "$@" --set ingress.hostname="${RELEASE_NAME}.${NAMESPACE}.fluidtruck.io"
          else
            set -- "$@" --set ingress.hostname="stage.${NAMESPACE}.fluidtruck.io"
          fi
        fi

        helm upgrade $RELEASE_NAME $CHART \
          --namespace "${NAMESPACE}" \
          --create-namespace \
          --install \
          --atomic \
          "$@"

        helm get values $RELEASE_NAME \
          --namespace $NAMESPACE
